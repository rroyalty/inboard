name: builds

on:
  pull_request:
  push:
    branches: [develop, main]
    tags:
      - "[0-9]+.[0-9]+.[0-9]+*"
  workflow_dispatch:

jobs:
  python:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, "3.10.0-beta - 3.10"]
    env:
      POETRY_HOME: /opt/poetry
      POETRY_VIRTUALENVS_CREATE: false
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Set up Poetry cache for Python dependencies
        uses: actions/cache@v2
        if: startsWith(runner.os, 'Linux')
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: ${{ runner.os }}-poetry-
      - name: Set up pre-commit cache
        uses: actions/cache@v2
        if: startsWith(runner.os, 'Linux')
        with:
          path: ~/.cache/pre-commit
          key: ${{ runner.os }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}
          restore-keys: ${{ runner.os }}-pre-commit-
      - name: Install Poetry
        run: |
          curl -fsS -o install-poetry.py \
            https://raw.githubusercontent.com/python-poetry/poetry/HEAD/install-poetry.py
          python install-poetry.py -y
          echo "$POETRY_HOME/bin" >> $GITHUB_PATH
      - name: Install dependencies
        run: poetry install --no-interaction -E fastapi
      - name: Run pre-commit hooks
        run: pre-commit run --all-files
      - name: Run unit tests
        run: pytest --cov-report=xml
      - name: Upload test coverage report to Codecov
        uses: codecov/codecov-action@v1
        with:
          fail_ci_if_error: true
          flags: unittests
      - name: Build Python package with latest Python version and publish to PyPI
        if: startsWith(github.ref, 'refs/tags/') && matrix.python-version == 3.9
        run: poetry publish --build -u __token__ -p ${{ secrets.PYPI_TOKEN }}
  docker:
    runs-on: ubuntu-latest
    needs: [python]
    strategy:
      matrix:
        python-version: [3.8, 3.9, "3.10.0-beta - 3.10"]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - run: python3 -m pip install httpie
      - name: Log in to Docker registry
        run: docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.PAT_GHCR }}
      - name: Build Docker images
        run: |
          PY=${{ matrix.python-version }}
          docker build . --rm --target base \
            --build-arg PYTHON_VERSION="$PY" \
            --cache-from python:"$PY" \
            -t ghcr.io/br3ndonland/inboard:base
          docker build . --rm --target starlette \
            --build-arg PYTHON_VERSION="$PY" \
            -t ghcr.io/br3ndonland/inboard:starlette
          docker build . --rm --target fastapi \
            --build-arg PYTHON_VERSION="$PY" \
            -t ghcr.io/br3ndonland/inboard:fastapi
      - name: Run Docker containers for testing
        run: |
          docker run -d -p 80:80 \
            -e "BASIC_AUTH_USERNAME=test_user" \
            -e "BASIC_AUTH_PASSWORD=r4ndom_bUt_memorable" \
            ghcr.io/br3ndonland/inboard:base
          docker run -d -p 81:80 \
            -e "BASIC_AUTH_USERNAME=test_user" \
            -e "BASIC_AUTH_PASSWORD=r4ndom_bUt_memorable" \
            ghcr.io/br3ndonland/inboard:starlette
          docker run -d -p 82:80 \
            -e "BASIC_AUTH_USERNAME=test_user" \
            -e "BASIC_AUTH_PASSWORD=r4ndom_bUt_memorable" \
            ghcr.io/br3ndonland/inboard:fastapi
      - name: Smoke test Docker containers
        run: |
          handle_error_code() {
            case "$1" in
            2) : 'Request timed out!' ;;
            3) : 'Unexpected HTTP 3xx Redirection!' ;;
            4) : 'HTTP 4xx Client Error!' ;;
            5) : 'HTTP 5xx Server Error!' ;;
            6) : 'Exceeded --max-redirects=<n> redirects!' ;;
            *) : 'Other Error!' ;;
            esac
            echo "$_"
            return "$1"
          }
          smoke_test() {
            if http --check-status --ignore-stdin -q --timeout=5 "$@"; then
              echo 'Smoke test passed. OK!'
            else
              handle_error_code "$?"
            fi
          }
          smoke_test_xfail() {
            if http --check-status --ignore-stdin -q --timeout=5 "$@" &>/dev/null; then
              echo 'Smoke test should have failed!'
              return 1
            else
              echo 'Smoke test expected to fail. OK!'
            fi
          }
          smoke_test :80
          smoke_test :81
          smoke_test :82
          smoke_test -a test_user:r4ndom_bUt_memorable :81/status
          smoke_test -a test_user:r4ndom_bUt_memorable :82/status
          smoke_test_xfail -a test_user:incorrect_password :81/status
          smoke_test_xfail -a test_user:incorrect_password :82/status
          smoke_test_xfail :81/status
          smoke_test_xfail :82/status
      - name: Push Docker images with latest Python version to registry
        if: >
          matrix.python-version == 3.9 &&
          (
            startsWith(github.ref, 'refs/tags/') ||
            github.ref == 'refs/heads/develop' ||
            github.ref == 'refs/heads/main'
          )
        run: |
          docker push ghcr.io/br3ndonland/inboard:base
          docker push ghcr.io/br3ndonland/inboard:starlette
          docker push ghcr.io/br3ndonland/inboard:fastapi
      - name: Add Python version tag to Docker images
        if: >
          startsWith(github.ref, 'refs/tags/') ||
          github.ref == 'refs/heads/develop' ||
          github.ref == 'refs/heads/main'
        run: |
          PY_TAG=python${{ matrix.python-version }}
          docker tag \
            ghcr.io/br3ndonland/inboard:base \
            ghcr.io/br3ndonland/inboard:base-"$PY_TAG"
          docker tag \
            ghcr.io/br3ndonland/inboard:starlette \
            ghcr.io/br3ndonland/inboard:starlette-"$PY_TAG"
          docker tag \
            ghcr.io/br3ndonland/inboard:fastapi \
            ghcr.io/br3ndonland/inboard:fastapi-"$PY_TAG"
          docker push ghcr.io/br3ndonland/inboard:base-"$PY_TAG"
          docker push ghcr.io/br3ndonland/inboard:starlette-"$PY_TAG"
          docker push ghcr.io/br3ndonland/inboard:fastapi-"$PY_TAG"
      - name: Add Git tag to Docker images
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          GIT_TAG=$(echo ${{ github.ref }} | cut -d / -f 3)
          PY_TAG=python${{ matrix.python-version }}
          docker tag \
            ghcr.io/br3ndonland/inboard:base \
            ghcr.io/br3ndonland/inboard:base-"$GIT_TAG"
          docker tag \
            ghcr.io/br3ndonland/inboard:starlette \
            ghcr.io/br3ndonland/inboard:starlette-"$GIT_TAG"
          docker tag \
            ghcr.io/br3ndonland/inboard:fastapi \
            ghcr.io/br3ndonland/inboard:fastapi-"$GIT_TAG"
          docker tag \
            ghcr.io/br3ndonland/inboard:base \
            ghcr.io/br3ndonland/inboard:base-"$GIT_TAG"-"$PY_TAG"
          docker tag \
            ghcr.io/br3ndonland/inboard:starlette \
            ghcr.io/br3ndonland/inboard:starlette-"$GIT_TAG"-"$PY_TAG"
          docker tag \
            ghcr.io/br3ndonland/inboard:fastapi \
            ghcr.io/br3ndonland/inboard:fastapi-"$GIT_TAG"-"$PY_TAG"
          docker push ghcr.io/br3ndonland/inboard:base-"$GIT_TAG"
          docker push ghcr.io/br3ndonland/inboard:starlette-"$GIT_TAG"
          docker push ghcr.io/br3ndonland/inboard:fastapi-"$GIT_TAG"
          docker push ghcr.io/br3ndonland/inboard:base-"$GIT_TAG"-"$PY_TAG"
          docker push ghcr.io/br3ndonland/inboard:starlette-"$GIT_TAG"-"$PY_TAG"
          docker push ghcr.io/br3ndonland/inboard:fastapi-"$GIT_TAG"-"$PY_TAG"
      - name: Tag and push latest Docker image
        if: >
          matrix.python-version == 3.9 &&
          (
            startsWith(github.ref, 'refs/tags/') ||
            github.ref == 'refs/heads/develop' ||
            github.ref == 'refs/heads/main'
          )
        run: |
          docker tag \
            ghcr.io/br3ndonland/inboard:fastapi \
            ghcr.io/br3ndonland/inboard:latest
          docker push ghcr.io/br3ndonland/inboard:latest
